import pygame.draw

from map import world_map
from settings import *
from itertools import islice


def mapping(a, b):
    return (a // 100) * 100, (b // 100) * 100


class Player:
    def __init__(self):
        self.x, self.y = start_player_pos
        self.player_direction_of_view = player_direction_of_view
        self.drawing_range = DRAWING_RANGE
        self.angle = player_angle
    @property
    def pos(self):
        return self.x, self.y

    def check_press(self):
        self.MOVE_BUTTONS_PRESS = dict(islice(BUTTONS_PRESS.items(), 4))
        self.TURN_BUTTONS_PRESS = dict(islice(BUTTONS_PRESS.items(), 4, 6))

    def movement(self):
        sin_a = math.sin(self.player_direction_of_view)
        cos_a = math.cos(self.player_direction_of_view)
        keys = pygame.key.get_pressed()
        if keys[pygame.K_w]:
            self.x += player_speed * cos_a
            self.y += player_speed * sin_a
        if keys[pygame.K_s]:
            self.x += -player_speed * cos_a
            self.y += -player_speed * sin_a
        if keys[pygame.K_a]:
            self.x += player_speed * sin_a
            self.y += -player_speed * cos_a
        if keys[pygame.K_d]:
            self.x += -player_speed * sin_a
            self.y += player_speed * cos_a
        if keys[pygame.K_LEFT]:
            self.angle -= 0.02
        if keys[pygame.K_RIGHT]:
            self.angle += 0.02


    def ray_casting(sc, player_pos, player_angle):
        ox, oy = player_pos
        xm, ym = mapping(ox, oy)
        cur_angle = player_angle - FOV / 2
        for ray in range(RAYS_INT):
            sin_a = math.sin(cur_angle)
            cos_a = math.cos(cur_angle)
            sin_a = sin_a if sin_a else 0.000001
            cos_a = cos_a if cos_a else 0.000001

            # verticals
            x, dx = (xm + 100, 1) if cos_a >= 0 else (xm, -1)
            for i in range(0, WIDTH, 100):
                depth_v = (x - ox) / cos_a
                y = oy + depth_v * sin_a
                if mapping(x + dx, y) in world_map:
                    break
                x += dx * 100

            # horizontals
            y, dy = (ym + 100, 1) if sin_a >= 0 else (ym, -1)
            for i in range(0, HEIGHT, 100):
                depth_h = (y - oy) / sin_a
                x = ox + depth_h * cos_a
                if mapping(x, y + dy) in world_map:
                    break
                y += dy * 100

            # projection
            depth = depth_v if depth_v < depth_h else depth_h
            depth *= math.cos(player_angle - cur_angle)
            proj_height = PROJ_COEF / depth
            c = 255 / (1 + depth * depth * 0.00002)
            color = (c, c // 2, c // 3)
            pygame.draw.rect(sc, color, (ray * SCALE, HEIGHT / 2 - proj_height // 2, SCALE, proj_height))
            cur_angle += DELTA_ANGLE
