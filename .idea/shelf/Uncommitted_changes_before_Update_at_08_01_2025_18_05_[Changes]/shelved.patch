Index: ray_casting.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\nimport math\r\nfrom settings import *\r\nfrom map import world_map\r\n\r\ndef ray_casting(sc, player_pos, player_angle, textures):\r\n    ox, oy = player_pos\r\n    mapping = lambda a, b: ((a // WALL_SIZE) * WALL_SIZE, (b // WALL_SIZE) * WALL_SIZE)\r\n    xm, ym = mapping(ox, oy)\r\n    cur_angle = player_angle - FOV / 2\r\n    ray_width = WIDTH // RAYS_INT  # Ширина одного луча на экране\r\n\r\n    for ray in range(RAYS_INT):\r\n        sin_a = math.sin(cur_angle)\r\n        cos_a = math.cos(cur_angle)\r\n        sin_a = sin_a if sin_a else 0.000001\r\n        cos_a = cos_a if cos_a else 0.000001\r\n\r\n        # вертикальный перебор\r\n        x, dx = (xm + WALL_SIZE, 1) if cos_a >= 0 else (xm, -1)\r\n        depth_v = float('inf')  # Инициализируем глубину для вертикальных лучей\r\n        texture_v = None  # Инициализируем текстуру для вертикальных лучей\r\n        for i in range(0, WIDTH * 2, WALL_SIZE):  # Увеличиваем диапазон для поиска стен\r\n            depth_v_temp = (x - ox) / cos_a\r\n            yv = oy + depth_v_temp * sin_a\r\n            tile_v = mapping(x + dx, yv)\r\n            if tile_v in world_map:\r\n                depth_v = depth_v_temp\r\n                texture_v = world_map[tile_v]\r\n                break\r\n            x += dx * WALL_SIZE\r\n\r\n        # горизонтальный перебор\r\n        y, dy = (ym + WALL_SIZE, 1) if sin_a >= 0 else (ym, -1)\r\n        depth_h = float('inf')\r\n        texture_h = None\r\n        for i in range(0, HEIGHT * 2, WALL_SIZE):\r\n            depth_h_temp = (y - oy) / sin_a\r\n            xh = ox + depth_h_temp * cos_a\r\n            tile_h = mapping(xh, y + dy)\r\n            if tile_h in world_map:\r\n                depth_h = depth_h_temp\r\n                texture_h = world_map[tile_h]\r\n                break\r\n            y += dy * WALL_SIZE\r\n\r\n        if depth_v < depth_h:\r\n            depth, offset, texture = depth_v, yv, texture_v\r\n        else:\r\n            depth, offset, texture = depth_h, xh, texture_h\r\n        if texture is None:\r\n            continue\r\n\r\n        offset = int(offset) % WALL_SIZE  # Смещение текстуры в пределах стены\r\n        depth *= math.cos(player_angle - cur_angle)  # Коррекция перспективы\r\n        depth = max(depth, 0.00001)\r\n        proj_height = min(int(PROJ_COEF / depth), 2 * HEIGHT)  # Высота проекции стены\r\n\r\n        wall_column = textures[texture].subsurface(offset * TEXTURE_SCALE, 0, TEXTURE_SCALE, TEXTURE_HEIGHT)\r\n        wall_column = pygame.transform.scale(wall_column, (ray_width, proj_height))  # Масштабируем текстуру\r\n        sc.blit(wall_column, (ray * ray_width, HEIGHT // 2 - proj_height // 2))  # Рисуем текстуру\r\n\r\n        cur_angle += DELTA_ANGLE
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ray_casting.py b/ray_casting.py
--- a/ray_casting.py	(revision df9aefdac5a44f46ca7bea2cd6cb7c4cb85621c0)
+++ b/ray_casting.py	(date 1736336729336)
@@ -44,20 +44,26 @@
                 break
             y += dy * WALL_SIZE
 
+        # Выбираем ближайшую стену
         if depth_v < depth_h:
             depth, offset, texture = depth_v, yv, texture_v
         else:
             depth, offset, texture = depth_h, xh, texture_h
+
         if texture is None:
             continue
 
-        offset = int(offset) % WALL_SIZE  # Смещение текстуры в пределах стены
-        depth *= math.cos(player_angle - cur_angle)  # Коррекция перспективы
+        # Коррекция перспективы и устранение эффекта "рыбий глаз"
+        depth *= math.cos(player_angle - cur_angle)
         depth = max(depth, 0.00001)
-        proj_height = min(int(PROJ_COEF / depth), 2 * HEIGHT)  # Высота проекции стены
 
+        # Вычисление высоты проекции стены
+        proj_height = min(int(PROJ_COEF / depth), 2 * HEIGHT)
+
+        # Отрисовка текстуры стены
+        offset = int(offset) % WALL_SIZE
         wall_column = textures[texture].subsurface(offset * TEXTURE_SCALE, 0, TEXTURE_SCALE, TEXTURE_HEIGHT)
-        wall_column = pygame.transform.scale(wall_column, (ray_width, proj_height))  # Масштабируем текстуру
-        sc.blit(wall_column, (ray * ray_width, HEIGHT // 2 - proj_height // 2))  # Рисуем текстуру
+        wall_column = pygame.transform.scale(wall_column, (ray_width, proj_height))
+        sc.blit(wall_column, (ray * ray_width, HEIGHT // 2 - proj_height // 2))
 
         cur_angle += DELTA_ANGLE
\ No newline at end of file
